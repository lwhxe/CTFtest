#include <iostream>
#include <cstdint>  // For uint8_t
#include <iomanip>

using namespace std;

string bytes_to_string(const uint8_t* array, size_t size) {
	string result;
	for (size_t i = 0; i < size; i++) {
		result += static_cast<char>(array[i]);
	}
	return result;
}
void printhex(uint8_t REG[3][16]) {
	for (int i = 0; i < 3; i++) {
		cout << "REG[" << i << "]:	";
		for (int j = 0; j < 16; j++) {
			cout << hex << setw(2) << setfill('0') << static_cast<int>(REG[i][j]) << " ";
		}
		cout << "	";
	}
	cout << endl;
}
void printstr(uint8_t REG[3][16]) {
	// Convert each REG array to a string
	for (int i = 0; i < 3; i++) {
		string reg_string = bytes_to_string(REG[i], 16);
		cout << "REG[" << i << "]: " << reg_string << std::endl;
	}
}
static const uint8_t inv_sbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
void subBytes(uint8_t* state) {
	for (int i = 0; i < 16; i++) {
		state[i] = inv_sbox[state[i]];
	}
}

void shiftRows(uint8_t* state) {
	uint8_t temp;

	// Row 1: No change

	// Row 2: Shift right by 1
	temp = state[13];
	state[13] = state[9];
	state[9] = state[5];
	state[5] = state[1];
	state[1] = temp;

	// Row 3: Shift right by 2
	temp = state[2];
	state[2] = state[10];
	state[10] = temp;
	temp = state[6];
	state[6] = state[14];
	state[14] = temp;

	// Row 4: Shift right by 3 (equivalent to shift left by 1)
	temp = state[3];
	state[3] = state[7];
	state[7] = state[11];
	state[11] = state[15];
	state[15] = temp;
}

static uint8_t gmul(uint8_t a, uint8_t b) {
	uint8_t p = 0;
	uint8_t hi_bit_set;
	for (int i = 0; i < 8; i++) {
		if (b & 1)
			p ^= a;
		hi_bit_set = (a & 0x80);
		a <<= 1;
		if (hi_bit_set)
			a ^= 0x1b; // 0x1b is the irreducible polynomial x^8 + x^4 + x^3 + x + 1
		b >>= 1;
	}
	return p;
}

// Inverse MixColumns function
void mixColumns(uint8_t* state) {
	for (int i = 0; i < 4; i++) {
		uint8_t a = state[i * 4];
		uint8_t b = state[i * 4 + 1];
		uint8_t c = state[i * 4 + 2];
		uint8_t d = state[i * 4 + 3];

		state[i * 4] = gmul(a, 0x0e) ^ gmul(b, 0x0b) ^ gmul(c, 0x0d) ^ gmul(d, 0x09);
		state[i * 4 + 1] = gmul(a, 0x09) ^ gmul(b, 0x0e) ^ gmul(c, 0x0b) ^ gmul(d, 0x0d);
		state[i * 4 + 2] = gmul(a, 0x0d) ^ gmul(b, 0x09) ^ gmul(c, 0x0e) ^ gmul(d, 0x0b);
		state[i * 4 + 3] = gmul(a, 0x0b) ^ gmul(b, 0x0d) ^ gmul(c, 0x09) ^ gmul(d, 0x0e);
	}
}

void addRoundKey(uint8_t* state, uint8_t* roundKey) {
	for (int i = 0; i < 16; i++) {
		state[i] ^= roundKey[i];
	}
}

// Main decryption function
uint8_t* aes_dec(uint8_t input[16], uint8_t roundkey[16]) {
	const int numRounds = 14; // Number of rounds for AES-128

	// First round
	addRoundKey(input, roundkey);

	// Remaining rounds
	for (int i = 1; i < numRounds; ++i) {
		shiftRows(input);
		subBytes(input);
		mixColumns(input);
		addRoundKey(input, roundkey + 16 * i);
	}

	// Final round
	shiftRows(input);
	subBytes(input);
	addRoundKey(input, roundkey + 16 * numRounds);

	return input; // Return the first byte of the decrypted result
}

int main() {
 	uint8_t REG[3][16] = {
			{0x6e, 0x1d, 0x71, 0x30, 0xaf, 0x40, 0x3a, 0xac, 0xb4, 0x9a, 0xed, 0x58, 0xe4, 0x63, 0x29, 0x94},
			{0xa4, 0xed, 0xb6, 0x6c, 0x74, 0xf6, 0x9b, 0x01, 0xae, 0x91, 0xa4, 0x86, 0x02, 0x04, 0x32, 0xcd},
			{0xaf, 0xe1, 0x63, 0x1d, 0x45, 0x9b, 0xe1, 0xbd, 0x87, 0x14, 0xe3, 0x52, 0x60, 0xf7, 0xed, 0x9d}
	};

 	uint8_t TEMP[16] = {};

	printhex(REG);

	cout << "Values\n";
	/*
	movaps xmm2, xmm3
	movaps xmm0, xmm2
	movaps xmm3, xmm0
	*/
	memcpy(TEMP, &REG[2], sizeof(TEMP));     // Save REG[2]
	printhex(REG);
	memcpy(REG[2], &REG[1], sizeof(REG[2])); // Move REG[1] to REG[2]
	printhex(REG);
	memcpy(REG[1], &REG[0], sizeof(REG[1])); // Move REG[0] to REG[1]
	printhex(REG);
	memcpy(REG[0], &TEMP, sizeof(REG[0]));   // Move original REG[2] to REG[0]
	printhex(REG);

	for (int cl = 0; cl != 48; cl++) {
		/*	
		movaps xmm2, xmm3
		movaps xmm1, xmm2
		movaps xmm0, xmm1
		*/
		cout << "Rotate\n";
		memcpy(TEMP, REG[2], sizeof(TEMP));     // Save REG[2]
		printhex(REG);
		memcpy(REG[2], REG[1], sizeof(REG[2])); // Restore REG[2]'s original value
		printhex(REG);
		memcpy(REG[1], REG[0], sizeof(REG[1])); // Restore REG[1]'s original value
		printhex(REG);
		memcpy(REG[0], TEMP, sizeof(REG[0]));   // Restore REG[0]'s original value
		printhex(REG);
		
		cout << "AES\n";
		// aesenc xmm3, xmm0
		uint8_t* decrypted = aes_dec(TEMP, REG[0]);

		// XOR the result with REG[2]
		for (int i = 0; i < 16; i++) {
			decrypted[i] ^= TEMP[i];
		}

		memcpy(TEMP, &decrypted, 16);
		
		printhex(REG);
		
		cout << "XOR\n";
		// xorps xmm3, xmm2
		for (int i = 0; i < 16; i++) {
			TEMP[i] = TEMP[i] ^ REG[2][i];
		}

		printhex(REG);
		
		cout << "MOVAPS\n";
		// movaps xmm3, xmm1
		memcpy(REG[1], &TEMP, sizeof(REG[1]));
	}
	
	printhex(REG);
	printstr(REG);

	return 0;
}
